# -*- coding: utf-8 -*-
# Author: Cynthia

"""
    证明求前n项(而非第n项)的时间复杂度是Ω(1.5^n)

    不对吧...都没给算法怎么评估时间复杂度...自己写一个试试
"""

def f(n):

    res = [0]*n  # n
    res[0], res[1] = 0, 1  # 2

    for i in range(2, n):
        res[i] = res[i-2]+res[i-1]  # n-2

# ???这不是O(n)吗....???

def rf(n):
    if n == 1: return 0
    if n == 2: return 1
    return rf(n-1)+rf(n-2)

"""
    难道题目指的是用递归方式求第n个?
    
    n = 1 时 1
    n = 2 时 1
    n = 3 时 1+1+1
    n = 4 时: 2的时间复杂度+3的时间复杂度+1=5
    n = i 时, t(i) = t(i-2)+t(i-1)+1
    
    证明t(n) >= c*(3/2)^n, 令c=1
    
    当n=1时, 1 >= 3/2不满足
    当n=2时, 1 >= 9/4也不满足
    当n=3时, 3 >= 27/8也不行
    当n=4时, 5 >= 81/16也不行
    当n=5时, 9 >= 243/32, 可以, 令n>=5, 当n=6时也满足
    
    假设当n=i时满足, 当n=i+1时也满足
    t(i) >= (3/2)^i
    t(i+1) >= (3/2)^(i+1)
    那么t(i+2) = t(i)+t(i+1)+1 >= (3/2)^i+(3/2)^(i+1)+1
    = (3/2)^(-2)*(3/2)^(i+2)+(3/2)^(-1)*(3/2)^(i+2)+1
    = 10/9*(3/2)^(i+2)+1 >= (3/2)^(i+2)
    证明i+2时也满足, 所以结论满足
    
    
    再证明t(n) <= c*n, 即是O(n)的, 令c=1
    当n=1时, 1<=1
    当n=2时, 1<=2
    假设当n=i时, t(i) <= i
    当n=i+1时, t(i+1) <= i+1
    那么t(i+2) = t(i)+t(i+1)+1 <= i+i+1+1 =2*(i+2)
    无法证明 t(i+2) <= i+2
    即无法证明t(n)是O(n)的
    (递归形式肯定不是)
    
"""