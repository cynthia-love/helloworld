# -*- coding: utf-8 -*-
# Author: Cynthia

"""
    数学方法
    渐进分析之大O, 大Ω, 大θ
"""

"""
    存在k, 当n >= k时, f(n) <= c*g(n)
    此时我们就说f(n)是O(g(n))
    即当n无限大时, f(n)无限逼近于c*g(n)
    
    也可以说f(n)的量级是g(n)
    
    比如8*n+5的量级是n, 即f(n)是O(n)的
    
    !!!(当然, 你也可以取g(n)为n^2, 但一般不这么干
    会尽量取比较接近f(n)的那个上界)!!!
    
    应用举例: 从一个列表找最大值的时间复杂度为
    a + b*n, 即O(n)
"""

"""
    大O的一些性质
    1. f(n) = a0+a1*n+a2*n^2+a3*n^3+...+ak*n^k 是O(n^k)
    即多项式的最高阶项决定了该多项式的渐进增长速率
    
    2. 证明 5*n^2+3*n*log(n)+2n+5是O(n^2)
    5*n^2+3*n*log(n)+2n+5 <= 5*n^2+3*n*n+2n+5
    <= 8*n^2+2n+5 <= 15*n^2, 所以是O(n^2)的
    
    3. 证明3*log(n)+2是O(log(n))
    3*log(n)+2 <= 3*log(n) + 2*log(n) <= 5*log(n), 取n>=2
    
    4. 证明2^(n+2)是O(2^n)
    2^(n+2) = 4*2^n <= 4*2^n, 当n>=1时, 满足, 所以是O(2^n)的
    
    5. 证明2*n+100*log(n)是O(n)
    2*n+100*log(n) <= 2*n+100*n <= 102*n, 当n>=1时, 所以是O(n)的
"""

"""
    与大O类似, 大Ω定义渐进下界
    存在k, 当n>=k时(或者理解为无限大时), f(n) >= c*g(n)
    
    举例, 3n*log(n)-2n >= 3n*log(n)-2n*log(n)  # n>=2
    >= n*log(n)
    所以认为f(n)为Ω(n*log(n))
"""

"""
    大θ
    当n>=k时, a*g(n) <= f(n) <= b*g(n)
    则称f(n)是θ(g(n))的
    
    举例3*n*log(n)+4*n+5*log(n)是θ(n*log(n))的
    3*n*log(n)+4*n+5*log(n) <= 3*n*log(n)+4*n*log(n)+5*log(n)*n = 12*n*log(n), 当n>=2
    3*n*log(n)+4*n+5*log(n) >= 3*n*log(n)
    综上, f(n)是O(n*log(n))的
    
"""

"""
    一般情况下认为
    O(1) < O(log(n)) < O(n) < O(n*log(n)) < O(n^2) < O(n^3) < O(2^n)
    但注意, 这种比较并不是绝对的:
    大O符号隐藏的常数因子可能非常大, 比如10^10*n未必比10*n*log(n)高效
    尤其是可以确定输入量级n不会特别大的情况下
    
    再比如: 2^100*n, 和n^2, 虽然前者渐进速度更快, 但我们还是倾向于选择后者
    毕竟, 比如n=10的时候, 前者的时间消耗是不可接受的
"""