# -*- coding: utf-8 -*-
# Author: Cynthia

"""
    算法分析中可能用到的证明手段
    (比如证明算法正确, 或者证明算法时间复杂度)
"""

"""
    直接证明法
    比如: 在男性中, 存在身高超过190cm的. 证明: 姚明男, 身高超过, 所以该说法正确
    比如: 在男性中, 所有人身高都超过190cm. 证明: 我男, 身高不到, 所以该说法错误
"""

"""
    证明等价的逆否命题, if p -> q 等价于 if not q->not p
    比如: 如果ab是偶数, 那么a是偶数或者b是偶数
    逆否: 如果a和b都不是偶数(都是奇数), 那么ab不是偶数(是奇数)
    设a = 2i+1, b = 2j+1, ab = 4ij+2i+2j+1, 是奇数
    逆否命题成立, 所以原命题成立
"""

"""
    反证法, if p -> q, 假设 if p -> not q
    比如: 如果ab是偶数, 那么a是偶数或者b是偶数
    命题: 假设: 如果ab是偶数, a和b都不是偶数
    
    设a = 2i+1, b = 2j+1, ab = 4ij+2i+2j+1, ab不可能是偶数
    所以假设不成立, 所以得出结论, 如果ab是偶数, a和b至少有一个是偶数
    
    
    再比如: 
    命题: 如果a>b>0, 那么a*a > b*b
    假设: a*a > b*b 不成立, 即 a*a <= b*b
    那么: a <= b/a * b < 1 * b, a <= b, 与a>b矛盾
    所以假设不成立, 所以原命题正确
    
"""

"""
    归纳法
    先证明当n=1时命题成立(初始成立)
    再证明如果n=m时命题成立, 则n=m+1时命题也成立(推导式成立)
    得出结论
    
    例如: 
    证明斐波那契额数列f(n) < 2^n
    1. f(1) = 1 < 2
    2. f(2) = 2 < 2^2
    3. 假设f(m) < 2^m, f(m+1) < 2^(m+1)
    则f(m+2) = f(m)+f(m+1) = 2^m+2^(m+1) = 3*2^m
    = 3/4*2^(m+2) < 2^(m+2)
    综上腿短f(n) < 2^n成立
    
    再例如: 
    证明1+2+3+..+n = n*(n+1)/2
    1. n = 1时, 1 = 1*2/2
    2. 假设n=m时1+2+..+m = m*(m+1)/2
    则n=m+1时, 1+2+..+m+m+1 = m*(m+1)/2+m+1 = (m+1)(m+2)/2
    综上, 等式成立
"""

"""
    循环不变量, 即在循环开始和循环中, 每一次迭代均为真的性质. 一个正确的循环, 
    循环不变量和终止条件必须同时成立. 循环不变量主要是为了证明循环的正确性. 
    
    要求循环开始前为真
    如果在第i轮迭代前为真, 则第i轮迭代后也为真
    循环终止后为真
    
    明确一点: 循环不变量可以有很多选择; 不变量并不一定是值不变, 还可以只是和循环变量i的函数关系不变!
    
    举例:
    def f():
        res = 0  # 一般循环不变量直接选循环后最终要求得的值, 且这个值随着循环会变, 且有一定函数关系, 比如这里res
        for i in range(1, 11):
            res += 1
        return res
        
    1. 定义循环不变量: res = sum(1, 2, ...i)
    2. 循环开始时, 空存, L(0) = 0, 成立
    3. 假设L(i) = 1+2+3+..+i
       即第i+1轮开始循环不变量为真
       那么第i+1轮结束, 循环不变量L(i+1) = L(i)+i+1, 也为真
    4. i=10为最后一轮循环, 退出后L(10) = L = 1+2+..+10, 为真, 且恰好是循环的目的, 求1-10的累加
    从而得出结论, 算法设计的没问题
"""